#!/usr/bin/env bash

# My personal implementation of BSPWM scratchpad functionality, where I have tried to replicate the same functionality
#  that I used to in another window managers I'm using (awesome wm, dwm, xmonad, qtile, i3)
#
# dependencies: bspc, rg, xdotool, xrandr, dunst
# example of using: ./scratchpad yazi

# default proportions of scratch window related from current screen with. override to particual app, if need different proportions
scratchpad_factor_width=0.75
scratchpad_factor_height=0.8

# use `xprop WM_CLASS` to get window class and instant values:

case "$1" in
    "yazi")
        # xprop WM_CLASS: WM_CLASS(STRING) = "ghostty", "com.ghostty.group01"
        instance_name="ghostty"
        class_name="com.scratchpad.yazi"
        run_cmd="ghostty --class=com.scratchpad.yazi -e yazi"
        notify_msg="📂 Yazi File Manager"
        ;;
    "nautilus")
        instance_name="org.gnome.Nautilus"
        class_name="org.gnome.Nautilus"
        run_cmd="nautilus"
        notify_msg="📂 Nautilus"
        ;;
    "telegram")
        instance_name="Telegram"
        class_name="TelegramDesktop"
        run_cmd="Telegram"
        notify_msg="💬 Telegram"
        ;;
    "youtube_music")
        instance_name="crx_cinhimbnkkaeohfgghhklpknlkffjgod"
        class_name="Brave-browser"
        run_cmd="brave --profile-directory=Default --app-id=cinhimbnkkaeohfgghhklpknlkffjgod"
        notify_msg="💽 Music"
        ;;
    "google_chat")
        instance_name="crx_mdpkiolbdkhdjpekfbkbmhigcaggjagi"
        class_name="Brave-browser"
        run_cmd="brave --profile-directory=Default --app-id=mdpkiolbdkhdjpekfbkbmhigcaggjagi"
        notify_msg="✉️  Google Chat"
        ;;
    "monkey_type")
        instance_name="crx_picebhhlijnlefeleilfbanaghjlkkna"
        class_name="Brave-browser"
        run_cmd="brave --profile-directory=Default --app-id=picebhhlijnlefeleilfbanaghjlkkna"
        notify_msg="  Monkey Type"
        ;;
    *)
        echo "$1 - is not supported"
        exit 1
        ;;
esac

. "$HOME/dotfiles/bspwm/.config/bspwm/shared"
filename=/tmp/"$class_name"_"$instance_name"

function bspc_write_nodeid() {
    retries=0
    max_retries=50 # 50 * 0.1s = 5 sec max to up any application

    while true; do
        node_found=false

        for id in $(bspc query -d focused -N -n '.floating.sticky'); do
            bspc query --node "$id" -T |  rg -q "$class_name.*$instance_name" && { echo "$id" > $filename; node_found=true; break; }
        done

        [[ "$node_found" == "true" ]] && break

        # Increment retry counter and check if we've reached the limit
        retries=$((retries + 1))
        if [ "$retries" -ge "$max_retries" ]; then
            echo "Max retries reached. Not fount any node by [ class=$class_name, instant=$instance_name ] Exiting."
            exit 1
        fi

        sleep 0.1s
    done
}

function hide_all_except_current() {
    for id in $(bspc query -d focused -N -n '.floating.sticky.!hidden'); do
        bspc query --node "$id" -T | rg -q -v "$class_name.*$instance_name" && bspc node "$id" --flag hidden=on
    done
}

function toggle_hidden() {
    [ -e "$filename" ] || exit 1
    hide_all_except_current # comment it if your want keep prev opened scratchpads visible
    id=$(<"$filename")

    case "$1" in
        "show")
            bspc node "$id" --flag hidden=off
            ;;
        *)
            bspc node "$id" --flag hidden -f
            ;;
    esac
}

# search by [class_name] AND [instance_name]
WIN_ID=$(comm -12 <(xdotool search --class "$class_name" | sort) <(xdotool search --classname "$instance_name" | sort))

if [ -z "$WIN_ID" ]; then
    rectangle_val=$(calculate_scratch_resolution $scratchpad_factor_width $scratchpad_factor_height)
    #echo rectangle_val=$rectangle_val
    bspc rule -a "$class_name":"$instance_name" --one-shot state=floating sticky=on hidden=on rectangle="$rectangle_val"
    bash -c "$run_cmd" > /dev/null 2>&1 &
    dunstify "$notify_msg" -t 700
    bspc_write_nodeid
    toggle_hidden show
    exit 0
else
    toggle_hidden toggle
    exit 0
fi