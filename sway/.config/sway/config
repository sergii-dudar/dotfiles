set $mod Mod4
set $alt Mod1
set $ctrl Control

include ~/.config/sway/theme.conf
include ~/.config/sway/rules.conf
include ~/.config/sway/modes.conf

exec_always --no-startup-id ~/dotfiles/bin/apply-display-settings.w.sh
exec --no-startup-id ~/dotfiles/bin/wmscripts/autostart_once.w.sh sway
exec_always --no-startup-id ~/dotfiles/bin/wmscripts/autostart_always.w.sh sway

input "type:keyboard" {
    repeat_delay 200
    repeat_rate 30
    xkb_layout us,ua
    # xkb_variant ,nodeadkeys
    # xkb_options grp:alt_shift_toggle
    # xkb_options grp:ralt_toggle
}

# swaymsg -t get_outputs
# man 5 sway-output
#
# output "HDMI-A-1" {
#    # ...config options...
#    mode 3840x2160@60.000Hz
# }

output * bg ~/wallpapers/jpg/Wall147.jpg fill
output "HDMI-A-1" mode 3840x2160@60.000Hz
# output "HDMI-A-1" scale 1.4
# output "HDMI-A-1" transform 90

set $primary HDMI-1
set $secondary HDMI-2

workspace 1 output $primary
workspace 2 output $primary
workspace 3 output $primary
workspace 4 output $primary
workspace 5 output $primary
workspace 6 output $primary
workspace 7 output $primary
workspace 8 output $primary
workspace 9 output $secondary

# Check if HDMI-2 is connected, otherwise use HDMI-1
# exec --no-startup-id bash -c 'xrandr | grep -q "$secondary connected" || i3-msg "workspace 9, move workspace to output $primary"'

#i3-msg "workspace 2; move workspace to output HDMI-1"
# workspace 9 output HDMI-2
# workspace 2 output HDMI-1

# exec --no-startup-id (sleep 0.7 && i3-msg 'workspace 1') &

workspace_auto_back_and_forth yes
focus_on_window_activation focus
floating_modifier $mod
font pango:CaskaydiaCove Nerd Font 18
#
# Bind a switch key, which focuses the previously focused window (based on i3-back)
# bindsym $mod+Tab [con_mark=_back] focus
# bindsym $alt+Tab [con_mark=_back] focus

# move focused container to workspace and switch it
# NOTE: cant move to sxhkrc shortcut as present strange behavior

# Switch to workspace
bindsym $mod+1 workspace number 1
bindsym $mod+2 workspace number 2
bindsym $mod+3 workspace number 3
bindsym $mod+4 workspace number 4
bindsym $mod+5 workspace number 5
bindsym $mod+6 workspace number 6
bindsym $mod+7 workspace number 7
bindsym $mod+8 workspace number 8
bindsym $mod+9 workspace number 9
# bindsym $mod+0 workspace number 10

bindsym $mod+Shift+1 move container to workspace number 1, workspace number 1 output HDMI-1
bindsym $mod+Shift+2 move container to workspace number 2, workspace number 2 output HDMI-1
bindsym $mod+Shift+3 move container to workspace number 3, workspace number 3 output HDMI-1
bindsym $mod+Shift+4 move container to workspace number 4, workspace number 4 output HDMI-1
bindsym $mod+Shift+5 move container to workspace number 5, workspace number 5 output HDMI-1
bindsym $mod+Shift+6 move container to workspace number 6, workspace number 6 output HDMI-1
bindsym $mod+Shift+7 move container to workspace number 7, workspace number 7 output HDMI-1
bindsym $mod+Shift+8 move container to workspace number 8, workspace number 8 output HDMI-1
bindsym $mod+Shift+9 move container to workspace number 9, workspace number 9 output HDMI-2

# exec_always --no-startup-id pgrep -f '^kitty --class ttrm,ttrm' || kitty --class ttrm,ttrm
# exec_always --no-startup-id pgrep -f '^kitty --class vol,vol' || kitty --class vol,vol -e pulsemixer
# exec_always --no-startup-id pgrep -f '^kitty --class news,news' || kitty --class news,news -e newsboat
# exec_always --no-startup-id pgrep -f '^kitty --class mus,mus' || kitty --class mus,mus -e ncmpcpp
# exec_always --no-startup-id pgrep -f '^kitty --class fm,fm' || kitty --class fm,fm -e ranger

# set $mode_launcher Launch: [f]irefox [t]hunderbird
# bindsym $mod+o mode "$mode_launcher"

# mode "$mode_launcher" {
#     bindsym f exec firefox
#     bindsym t exec thunderbird
#
#     bindsym Escape mode "default"
#     bindsym Return mode "default"
# }
#----------------------------- sway start --------------------------------------
#-------------------------------------------------------------------------------
#------------------ base -------------------------------------------------------
set $left h
set $down j
set $up k
set $right l
# Your preferred terminal emulator
set $term ghostty
# Your preferred application launcher
set $menu ~/.config/rofi/scripts/launcher_t1
set $pmenu ~/.config/rofi/scripts/powermenu_t1

#-------------------------------------------------------------------------------
#------------------ keybind ----------------------------------------------------

#
# Basics:
#
    # Start a terminal
    bindsym $mod+Return exec $term

    # Kill focused window
    bindsym $mod+Shift+c kill

    # Start your launcher
    # bindsym $mod+d exec $menu
    #bindsym $alt+q exec ~/.config/rofi/scripts/powermenu_t1
    bindsym $alt+space exec $menu
    bindsym $mod+q exec $pmenu
    #bindsym $ctrl+alt+q exec ~/.config/rofi/scripts/powermenu_t1

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    # Reload the configuration file
    bindsym $mod+Shift+r reload

    # Exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
#
# Moving around:
#
    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right
    # Or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # Move the focused window with the same, but add Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right
    # Ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right

#-------------------------------------------------------------------------------
#----------------------------- sway end ----------------------------------------

bindsym $mod+r mode "resize"

mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing down will grow the windowâ€™s height.
        bindsym h resize shrink width 10 px or 10 ppt
        bindsym j resize grow height 10 px or 10 ppt
        bindsym k resize shrink height 10 px or 10 ppt
        bindsym l resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
}

# bindsym $mod+p scratchpad show; resize set 65ppt 70ppt; move position center
# bindsym $mod+p move scratchpad; resize set 65ppt 70ppt; move position center

bindsym $mod+i mode "layout"

mode "layout" {

        bindsym s layout stacking
        bindsym t layout tabbed

        bindsym e layout toggle split
        bindsym h layout splith
        bindsym v layout splitv

        bindsym f floating toggle

        # Toggle between stacking/tabbed/splith:
        bindsym r layout toggle stacking tabbed splith

        # use `f` - floating toggle to toggle scratchpad window back
        bindsym p move scratchpad; resize set 65ppt 70ppt; move position center
        
        # rotate [cycle] active scratchpads [show current, hide, show next]
        bindsym c scratchpad show

        # back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
}

#
# Status Bar:
#
# Read `man 5 sway-bar` for more information about this section.
bar {
    position top

    # When the status_command prints a new line to stdout, swaybar updates.
    # The default just shows the current date and time.
    status_command while date +'%a, %b %d %I:%M %p'; do sleep 1; done

    colors {
        statusline #ffffff
        background #323232
        inactive_workspace #32323200 #32323200 #5c5c5c
    }
}